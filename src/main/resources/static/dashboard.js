document.addEventListener('DOMContentLoaded', async () => {
    const jwt = localStorage.getItem('jwt');

    if (!jwt) {
        alert('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
        location.href = 'index.html';
        return;
    }

    try {
        const response = await fetch('http://localhost:8080/api/me', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${jwt}`
            }
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
        }

        const user = await response.json(); // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—ë—Ç { firstName, lastName, role }

        document.getElementById('userInfo').innerText = `–ü—Ä–∏–≤–µ—Ç, ${user.firstName} ${user.lastName} [${user.role}]`;

        if (user.role === 'ADMIN') {
            document.getElementById('adminActions').style.display = 'block';
        } else {
            document.getElementById('userActions').style.display = 'block';
        }

    } catch (error) {
        console.error(error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
        location.href = 'index.html';
    }
});

function logout() {
    localStorage.removeItem('jwt');
    location.href = 'index.html';
}

// ==== ADMIN METHODS ====

// üîÅ TODO: –í—Å—Ç–∞–≤—å —Å—é–¥–∞ –≤—ã–∑–æ–≤—ã —Å–≤–æ–∏—Ö API

document.addEventListener('DOMContentLoaded', () => {
    const token = localStorage.getItem('jwt');

    if (!token) {
        alert('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
        location.href = 'index.html';
        return;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
    fetch('http://localhost:8080/api/me', {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    })
        .then(res => res.json())
        .then(user => {
            document.getElementById('userInfo').innerText = `–ü—Ä–∏–≤–µ—Ç, ${user.firstName} ${user.lastName} (${user.role})`;

            if (user.role === 'ADMIN') {
                document.getElementById('adminActions').style.display = 'block';
            } else {
                document.getElementById('userActions').style.display = 'block';
            }
        })
        .catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            alert('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            localStorage.removeItem('jwt');
            location.href = 'index.html';
        });
});

function logout() {
    localStorage.removeItem('jwt');
    location.href = 'index.html';
}

// ===== ADMIN Actions =====

function createUser() {
    const firstName = prompt('–ò–º—è:');
    const lastName = prompt('–§–∞–º–∏–ª–∏—è:');
    const dateOfBirth = prompt('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (yyyy-mm-dd):');
    const phone = prompt('–¢–µ–ª–µ—Ñ–æ–Ω:');
    const password = prompt('–ü–∞—Ä–æ–ª—å:');

    if (!firstName || !lastName || !dateOfBirth || !phone || !password) {
        alert('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!');
        return;
    }

    const data = {
        firstName,
        lastName,
        dateOfBirth,
        phone,
        password
    };

    fetch('http://localhost:8080/api/user', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('jwt')}`
        },
        body: JSON.stringify(data)
    })
        .then(res => {
            if (res.ok) {
                alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!');
                return res.json();
            } else {
                return res.text().then(text => {
                    throw new Error(text);
                });
            }
        })
        .catch(err => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        });
}


function deleteUser() {
    const userId = prompt('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
    if (!userId) return;

    fetch(`http://localhost:8080/api/user/${userId}`, {
        method: 'DELETE',
        headers: {
            'Authorization': `Bearer ${localStorage.getItem('jwt')}`
        }
    })
        .then(res => {
            if (res.ok) {
                alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id ${userId} —É–¥–∞–ª—ë–Ω`);
            } else {
                return res.text().then(text => {
                    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', text);
                    alert(`–û—à–∏–±–∫–∞: ${text}`);
                });
            }
        })
        .catch(err => {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        });
}

let currentPage = 0;
let currentSort = 'id';
let currentDirection = 'asc';
const pageSize = 5;

function getAllUsers(page = 0, sort = 'id', direction = 'asc') {
    currentPage = page;
    currentSort = sort;
    currentDirection = direction;

    const url = `http://localhost:8080/api/user?page=${page}&size=${pageSize}&sort=${sort},${direction}`;

    fetch(url, {
        headers: {
            'Authorization': `Bearer ${localStorage.getItem('jwt')}`
        }
    })
        .then(res => {
            if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);
            return res.json();
        })
        .then(data => {
            const users = data.content;
            const totalPages = data.totalPages;
            const container = document.getElementById('userListContainer');

            if (!users || users.length === 0) {
                container.innerHTML = '<p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>';
                return;
            }

            let html = `
                <h3>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                <table border="1" cellpadding="5" cellspacing="0">
                    <thead>
                        <tr>
                            <th onclick="sortUsers('id')">ID</th>
                            <th onclick="sortUsers('firstName')">–ò–º—è</th>
                            <th onclick="sortUsers('lastName')">–§–∞–º–∏–ª–∏—è</th>
                            <th onclick="sortUsers('dateOfBirth')">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</th>
                            <th onclick="sortUsers('phone')">–¢–µ–ª–µ—Ñ–æ–Ω</th>
                            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            users.forEach(user => {
                html += `
                    <tr>
                        <td>${user.id}</td>
                        <td>${user.firstName}</td>
                        <td>${user.lastName}</td>
                        <td>${user.dateOfBirth}</td>
                        <td>${user.phone}</td>
                        <td><button onclick="deleteUser(${user.id})">–£–¥–∞–ª–∏—Ç—å</button></td>
                    </tr>
                `;
            });

            html += '</tbody></table>';

            // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            html += `<div style="margin-top: 10px;">`;
            for (let i = 0; i < totalPages; i++) {
                html += `<button onclick="getAllUsers(${i}, '${sort}', '${direction}')"
                            ${i === page ? 'disabled' : ''}>${i + 1}</button> `;
            }
            html += `</div>`;

            container.innerHTML = html;
        })
        .catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        });
}

function sortUsers(field) {
    const newDirection = currentSort === field && currentDirection === 'asc' ? 'desc' : 'asc';
    getAllUsers(0, field, newDirection);
}

function deleteUser(id) {
    if (!confirm(`–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${id}?`)) return;

    fetch(`http://localhost:8080/api/user/${id}`, {
        method: 'DELETE',
        headers: {
            'Authorization': `Bearer ${localStorage.getItem('jwt')}`
        }
    })
        .then(res => {
            if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${res.status}`);
            return res.text();
        })
        .then(msg => {
            alert(msg);
            getAllUsers(currentPage, currentSort, currentDirection);
        })
        .catch(err => {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        });
}

function getAllTerritories() {
    console.log('–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏');
    // TODO: fetch('...', { method: 'GET', ... })
}

function createTerritory() {
    console.log('–°–æ–∑–¥–∞—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é');
    // TODO: fetch('...', { method: 'POST', ... })
}

function deleteTerritory() {
    console.log('–£–¥–∞–ª–∏—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é');
    // TODO: fetch('...', { method: 'DELETE', ... })
}

function bindUserToTerritory() {
    console.log('–ü—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏');
    // TODO: fetch('...', { method: 'POST', ... })
}

function createPass() {
    console.log('–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫');
    // TODO: fetch('...', { method: 'POST', ... })
}

function deletePass() {
    console.log('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫');
    // TODO: fetch('...', { method: 'DELETE', ... })
}

function getAllPasses() {
    console.log('–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏');
    // TODO: fetch('...', { method: 'GET', ... })
}
document.addEventListener('DOMContentLoaded', () => {
    const token = localStorage.getItem('jwt');

    if (!token) {
        alert('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
        location.href = 'index.html';
        return;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
    fetch('http://localhost:8080/api/me', {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    })
        .then(res => res.json())
        .then(user => {
            document.getElementById('userInfo').innerText = `–ü—Ä–∏–≤–µ—Ç, ${user.firstName} ${user.lastName} (${user.role})`;

            if (user.role === 'ADMIN') {
                document.getElementById('adminActions').style.display = 'block';
            } else {
                document.getElementById('userActions').style.display = 'block';
            }
        })
        .catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            alert('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            localStorage.removeItem('jwt');
            location.href = 'index.html';
        });
});

function logout() {
    localStorage.removeItem('jwt');
    location.href = 'index.html';
}

// ===== ADMIN Actions =====



